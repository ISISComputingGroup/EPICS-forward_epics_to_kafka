// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IFCDAQDATA_FSD_H_
#define FLATBUFFERS_GENERATED_IFCDAQDATA_FSD_H_

#include "flatbuffers/flatbuffers.h"

namespace FSD {

struct ifcdaq_data;

struct ifcdaq_data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PV = 4,
    VT_TIMESTAMP = 6,
    VT_VALUE = 8,
    VT_TIME = 10
  };
  const flatbuffers::String *pv() const {
    return GetPointer<const flatbuffers::String *>(VT_PV);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  const flatbuffers::Vector<double> *value() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_VALUE);
  }
  const flatbuffers::Vector<double> *time() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_TIME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_PV) &&
           verifier.Verify(pv()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_TIME) &&
           verifier.Verify(time()) &&
           verifier.EndTable();
  }
};

struct ifcdaq_dataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pv(flatbuffers::Offset<flatbuffers::String> pv) {
    fbb_.AddOffset(ifcdaq_data::VT_PV, pv);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(ifcdaq_data::VT_TIMESTAMP, timestamp, 0);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<double>> value) {
    fbb_.AddOffset(ifcdaq_data::VT_VALUE, value);
  }
  void add_time(flatbuffers::Offset<flatbuffers::Vector<double>> time) {
    fbb_.AddOffset(ifcdaq_data::VT_TIME, time);
  }
  ifcdaq_dataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ifcdaq_dataBuilder &operator=(const ifcdaq_dataBuilder &);
  flatbuffers::Offset<ifcdaq_data> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<ifcdaq_data>(end);
    fbb_.Required(o, ifcdaq_data::VT_PV);
    fbb_.Required(o, ifcdaq_data::VT_VALUE);
    fbb_.Required(o, ifcdaq_data::VT_TIME);
    return o;
  }
};

inline flatbuffers::Offset<ifcdaq_data> Createifcdaq_data(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> pv = 0,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> value = 0,
    flatbuffers::Offset<flatbuffers::Vector<double>> time = 0) {
  ifcdaq_dataBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_time(time);
  builder_.add_value(value);
  builder_.add_pv(pv);
  return builder_.Finish();
}

inline flatbuffers::Offset<ifcdaq_data> Createifcdaq_dataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *pv = nullptr,
    uint64_t timestamp = 0,
    const std::vector<double> *value = nullptr,
    const std::vector<double> *time = nullptr) {
  return FSD::Createifcdaq_data(
      _fbb,
      pv ? _fbb.CreateString(pv) : 0,
      timestamp,
      value ? _fbb.CreateVector<double>(*value) : 0,
      time ? _fbb.CreateVector<double>(*time) : 0);
}

inline const FSD::ifcdaq_data *Getifcdaq_data(const void *buf) {
  return flatbuffers::GetRoot<FSD::ifcdaq_data>(buf);
}

inline const char *ifcdaq_dataIdentifier() {
  return "ifdq";
}

inline bool ifcdaq_dataBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, ifcdaq_dataIdentifier());
}

inline bool Verifyifcdaq_dataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FSD::ifcdaq_data>(ifcdaq_dataIdentifier());
}

inline void Finishifcdaq_dataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<FSD::ifcdaq_data> root) {
  fbb.Finish(root, ifcdaq_dataIdentifier());
}

}  // namespace FSD

#endif  // FLATBUFFERS_GENERATED_IFCDAQDATA_FSD_H_
