TOP=../../..

# Common locations
CMAKE_CONFIG_FLAGS += -DFLATBUFFERS_INCLUDE_DIR=$(EPICS_KIT_ROOT)/support/flatbuffers/master/include
CMAKE_CONFIG_FLAGS += -DRDKAFKA_INCLUDE_DIR=$(EPICS_KIT_ROOT)/support/librdkafka/master/include
CMAKE_CONFIG_FLAGS += -DPCREX_INCLUDE_DIRS=$(EPICS_KIT_ROOT)/support/pcre/master/include
CMAKE_CONFIG_FLAGS += -DRAPIDJSON_INCLUDE_DIR=$(EPICS_KIT_ROOT)/libraries/master/rapidjson/include
CMAKE_CONFIG_FLAGS += -DFMT_INCLUDE_DIR=$(EPICS_KIT_ROOT)/libraries/master/fmt/
CMAKE_CONFIG_FLAGS += -DFMT_SRC=$(EPICS_KIT_ROOT)/libraries/master/fmt/fmt/format.cc
CMAKE_CONFIG_FLAGS += -Dpath_include_streaming_data_types=$(EPICS_KIT_ROOT)/support/streaming_data_types/master
CMAKE_CONFIG_FLAGS += -Depicsv4_dir=$(EPICS_KIT_ROOT)/support/EPICS_V4/master

ifneq ($(findstring linux,$(EPICS_HOST_ARCH)),)
CMAKE_GENERATOR=Unix Makefiles

CMAKE_CONFIG_FLAGS += -DFLATBUFFERS_FLATC_EXECUTABLE=$(EPICS_KIT_ROOT)/support/flatbuffers/master/bin/$(EPICS_HOST_ARCH)/flatc
CMAKE_CONFIG_FLAGS += -DRDKAFKA_LIBRARIES=$(EPICS_KIT_ROOT)/support/librdkafka/master/lib/$(EPICS_HOST_ARCH)/librdkafka.so
CMAKE_CONFIG_FLAGS += -DPCREX_LIBRARIES=$(EPICS_KIT_ROOT)/support/pcre/master/lib/$(EPICS_HOST_ARCH)/libpcre.so

else
ifneq ($(findstring windows,$(EPICS_HOST_ARCH)),)
VS_VERS=$(filter %.0,$(subst \, ,$(VisualStudioVersion)))
VS_MAJOR=$(word 1,$(subst ., ,$(VS_VERS)))
VS_ARCH=$(VS_MAJOR) Win64
PLATFORM=x64
CMAKE_CONFIG_FLAGS=$(CMAKE_CONFIG_FLAGS_WIN32)
else
VS_ARCH=$(VS_MAJOR)
PLATFORM=Win32
CMAKE_CONFIG_FLAGS=$(CMAKE_CONFIG_FLAGS_WIN32)
endif

CMAKE_GENERATOR=Visual Studio $(VS_ARCH)

CMAKE_CONFIG_FLAGS += -DFLATBUFFERS_FLATC_EXECUTABLE=$(EPICS_KIT_ROOT)/support/flatbuffers/master/bin/$(EPICS_HOST_ARCH)/flatc.exe
CMAKE_CONFIG_FLAGS += -DRDKAFKA_LIBRARIES=$(EPICS_KIT_ROOT)/support/librdkafka/master/lib/$(EPICS_HOST_ARCH)/rdkafka.lib
CMAKE_CONFIG_FLAGS += -DPCREX_LIBRARIES=$(EPICS_KIT_ROOT)/support/pcre/master/lib/$(EPICS_HOST_ARCH)/pcre.lib
# Need to be explicit with nt.lib or Windows may gets its own unrelated one from the WIN32 SDK!
CMAKE_CONFIG_FLAGS += -Dpath_library_epics_NT=$(EPICS_KIT_ROOT)/support/EPICS_V4/master/normativeTypesCPP/lib/$(EPICS_HOST_ARCH)/nt.lib
endif

ifneq ($(findstring debug,$(EPICS_HOST_ARCH)),)
CMAKE_CONFIG_FLAGS += -DCMAKE_BUILD_TYPE:STRING=Debug
CMAKE_CONFIG=Debug
else
CMAKE_CONFIG_FLAGS += -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo
CMAKE_CONFIG=RelWithDebInfo
endif
ifneq ($(findstring static,$(EPICS_HOST_ARCH)),)
# What to do on a static build?
endif


install:
	cmake . -B_build -G "$(CMAKE_GENERATOR)" -DCMAKE_INSTALL_PREFIX=$(EPICS_ROOT)/support/forward_epics_to_kafka/master/bin/$(EPICS_HOST_ARCH) $(CMAKE_CONFIG_FLAGS)
	cmake --build _build --config $(CMAKE_CONFIG) $(CMAKE_BUILD_FLAGS) --target install


clean:
ifneq ($(findstring linux,$(EPICS_HOST_ARCH)),)
	$(MAKE) -f Makefile clean
	-$(RM) CMakeCache.txt cmake_install.cmake
	-$(RMDIR) CMakeFiles
else
	-$(RMDIR) /s /q _build
endif


uninstall:
ifneq ($(findstring windows,$(EPICS_HOST_ARCH)),)
	-$(RMDIR) /s /q  bin
endif
